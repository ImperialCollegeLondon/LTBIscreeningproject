costeff_cohort = costeff_cohort)
}
stats_scenario[[s]] <- costeff_stats(scenario_dat = dectree_res[[s]],
interv_QALY = interv_QALY,
interv_cost = interv_cost,
pop_year = nrow(cohort))
QALYloss_scenario[[s]] <-
interv_QALYloss %>%
purrr::transpose() %>%
simplify_all()
}
QALYloss_scenario <-
QALYloss_scenario %>%
purrr::transpose()
QALYloss_scenario
interv_QALYloss
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/R/scenario_QALY.R', echo=TRUE)
for (s in seq_len(n.scenarios)) {
message(sprintf("[ population model ] scenario: %s", green(s)))
for (i in seq_len(interv$N.mc)) {
# set.seed(12345)
p_LTBI_to_cured <- scenario_res$subset_pop[[s]][i, 'p_LTBI_to_cured']
interv_cost[[i]] <- interv_scenario_cost(prop_avoided = p_LTBI_to_cured)
interv_QALY[[i]] <- interv_scenario_QALY(prop_avoided = p_LTBI_to_cured)
interv_QALYloss[[i]] <- scenario_QALYloss(prop_avoided = p_LTBI_to_cured,
endpoint = interv$ENDPOINT_cost,
costeff_cohort = costeff_cohort)
}
stats_scenario[[s]] <- costeff_stats(scenario_dat = dectree_res[[s]],
interv_QALY = interv_QALY,
interv_cost = interv_cost,
pop_year = nrow(cohort))
QALYloss_scenario[[s]] <-
interv_QALYloss %>%
purrr::transpose() %>%
simplify_all()
}
QALYloss_scenario <-
QALYloss_scenario %>%
purrr::transpose()
QALYloss_scenario
interv_QALYloss <- vector(length = interv$N.mc, mode = "list")
QALYloss_scenario <- vector(length = n.scenarios, mode = "list")
for (s in seq_len(n.scenarios)) {
message(sprintf("[ population model ] scenario: %s", green(s)))
for (i in seq_len(interv$N.mc)) {
# set.seed(12345)
p_LTBI_to_cured <- scenario_res$subset_pop[[s]][i, 'p_LTBI_to_cured']
interv_cost[[i]] <- interv_scenario_cost(prop_avoided = p_LTBI_to_cured)
interv_QALY[[i]] <- interv_scenario_QALY(prop_avoided = p_LTBI_to_cured)
interv_QALYloss[[i]] <- scenario_QALYloss(prop_avoided = p_LTBI_to_cured,
endpoint = interv$ENDPOINT_cost,
costeff_cohort = costeff_cohort)
}
stats_scenario[[s]] <- costeff_stats(scenario_dat = dectree_res[[s]],
interv_QALY = interv_QALY,
interv_cost = interv_cost,
pop_year = nrow(cohort))
QALYloss_scenario[[s]] <-
interv_QALYloss %>%
purrr::transpose() %>%
simplify_all()
}
QALYloss_scenario <-
QALYloss_scenario %>%
purrr::transpose()
QALYloss_scenario
from_list_to_BCEA(QALYloss_scenario$statusquo_morbidity_pp)
from_list_to_BCEA(QALYloss_scenario$statusquo_morb_pp)
from_list_to_BCEA(QALYloss_scenario$statusquo_mort_pp)
from_list_to_BCEA(QALYloss_scenario$screened_morb_pp)
from_list_to_BCEA(QALYloss_scenario$screened_mort_pp)
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/04c-cost-effectiveness_QALY-costs.R', echo=TRUE)
from_list_to_BCEA(QALYloss_scenario$statusquo_morbidity)
from_list_to_BCEA(QALYloss_scenario$statusquo_mortality)
from_list_to_BCEA(QALYloss_scenario$screened_morbidity)
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_morbidity))
from_list_to_BCEA(QALYloss_scenario$statusquo_morb_pp)
write_clipboard(from_list_to_BCEA(QALYloss_scenario$statusquo_morb_pp))
write_clipboard(from_list_to_BCEA(QALYloss_scenario$statusquo_mort_pp))
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_mort_pp))
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_morb_pp))
# *******************************************
rm(list = ls())
devtools::load_all(".")
library(parallel)
library(assertthat)
library(miscUtilities)
library(crayon)
library(tibble)
library(memoise)
library(QALY)
save_session_info("session_info.txt")
##########
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/create_LTBI_input_workspace.R', echo=TRUE)
# *******************************************
rm(list = ls())
devtools::load_all(".")
library(parallel)
library(assertthat)
library(miscUtilities)
library(crayon)
library(tibble)
library(memoise)
library(QALY)
save_session_info("session_info.txt")
##########
data("policies_ls")
policies <- seq_along(policies_ls)
home_dir <- find.package("LTBIscreeningproject")
runtime <- proc.time()
sources_correctly <- NULL
policy <<- NA
policy <<- pp
policy <- 1
data("intervention_constants")
data("cost_effectiveness_params")
data("model_input_cohort")
data("policies"); data("policies_ls")
data("scenario_parameters")
source("scripts/setup_folders.R")#, echo = TRUE)
## use single-migrant-cohort here instead?
source("scripts/data-prep_constants-policy.R")#, echo = TRUE)
source("scripts/prep-decisiontree.R")#, echo = TRUE)
if (!interv$cluster) source("scripts/02-parallel-decision-tree.R")#, echo = TRUE)
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/04c-cost-effectiveness_QALY-costs.R', echo=TRUE)
tb_cost <- from_list_to_BCEA(aTB_CE_stats$cost_incur_person)
tb_QALYgain <- from_list_to_BCEA(aTB_CE_stats$QALYgain_person)
LTBI_cost <- from_list_to_BCEA(purrr::map(dectree_res, "mc_cost"), screen_discount)
LTBI_QALYgain <- from_list_to_BCEA(purrr::map(dectree_res, "mc_health"), -screen_discount)
LTBI_QALYgain
write_clipboard(LTBI_QALYgain)
from_list_to_BCEA(QALYloss_scenario$statusquo_morbidity)
from_list_to_BCEA(QALYloss_scenario$statusquo_mortality)
from_list_to_BCEA(QALYloss_scenario$statusquo_morb_pp)
from_list_to_BCEA(QALYloss_scenario$statusquo_mort_pp)
from_list_to_BCEA(QALYloss_scenario$screened_morbidity)
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_morbidity))
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_mortality))
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_morb_pp))
write_clipboard(from_list_to_BCEA(QALYloss_scenario$screened_mort_pp))
tb_QALYgain <- from_list_to_BCEA(aTB_CE_stats$QALYgain_person)
tb_QALYgain
write_clipboard(from_list_to_BCEA(aTB_CE_stats$QALYgain_person))
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(timetoevent = all_death_rNotificationDate,
utility = utility,
# age = age_all_notification,
age = NA,
start_delay = all_tb_issdt)
QALY_all_tb
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 1,
utility = utility,
# age = age_all_notification,
age = NA,
start_delay = 0
)
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 1,
utility = utility,
# age = age_all_notification,
age = NA,
start_delay = 0
)
QALY_all_tb
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 1,
# utility = utility,
utility = 1,
# age = age_all_notification,
age = NA,
start_delay = 0
)
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 1,
# utility = utility,
utility = NA,
# age = age_all_notification,
age = NA,
start_delay = 0
)
IMPUTED_sample$util
utility
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 1,
# utility = utility,
utility = list(disease_free = 1, activeTB = 1, postTx = 1),
# age = age_all_notification,
age = NA,
start_delay = 0
)
QALY_all_tb
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 0,
# utility = utility,
utility = list(disease_free = 1, activeTB = 1, postTx = 1),
# age = age_all_notification,
age = NA,
start_delay = 0
)
QALY_all_tb
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 1,
# utility = utility,
utility = list(disease_free = 1, activeTB = 1, postTx = 1),
# age = age_all_notification,
age = NA,
start_delay = 0
)
QALY_all_tb
timetoevent = 1
utility = list(disease_free = 1, activeTB = 1, postTx = 1)
age = NA
start_delay = 0
if (utility$disease_free < 0 || utility$disease_free > 1)
stop("Utility of disease free must be between 0 and 1")
if (utility$activeTB < 0 || utility$activeTB > 1)
stop("Utility of cases must be between 0 and 1")
if (utility$postTx < 0 || utility$postTx > 1)
stop("Utility of post-treatment must be between 0 and 1")
if (is.list(timetoevent)) {
timetoevent <-
timetoevent %>%
unlist() %>%
unname()
}
timetoevent[timetoevent < 0] <- 0
QALY_partial <- partial(calc_QALY_population,
age = age,
start_delay = start_delay)
diseasefree <- QALY_partial(utility = utility$disease_free,
time_horizons = timetoevent)
diseasefree
timetoevent
fatality <- QALY_partial(utility = utility$activeTB,
time_horizons = pmin(timetoevent, 0.5)) #ie 6 months
fatality
pmin(timetoevent, 0.5)
cured <- QALY_partial(utility = c(utility$activeTB, utility$postTx),
time_horizons = timetoevent)
cured
c(utility$activeTB, utility$postTx)
timetoevent
time_horizons = timetoevent
utility = c(utility$activeTB, utility$postTx)
start_delay
time_horizons
if (all(is.na(start_delay))) {
start_delay <- rep(0, length(time_horizons))
}
if (is.list(time_horizons)) {
time_horizons <- unlist(time_horizons) %>% set_names(NULL)
}
QALY <- NA
dat <- cbind(age, time_horizons, start_delay)
dat
mem_calc_QALY <- memoise(calc_QALY)
seq_along(time_horizons)
i <- 1
dati <- dat[i, ]
dati
if (!is.na(time_horizon) && time_horizon == 0)
return(0)
if (is.na(time_horizon) | length(utility) > time_horizon) {
time_horizon <- length(utility)
}
time_horizon
time_horizon <- time_horizons
if (is.na(time_horizon) | length(utility) > time_horizon) {
time_horizon <- length(utility)
}
if (is.na(age)) {
QoL <- rep(1, time_horizon)
}
QoL
time_horizon
# calculate QALYs for all tb cases for all outcomes
# so can sample later
QALY_all_tb <-
IMPUTED_sample %>%
subset(all_tb == TRUE) %$%
calc_QALY_tb(
# timetoevent = all_death_rNotificationDate,
timetoevent = 2,
# utility = utility,
utility = list(disease_free = 1, activeTB = 1, postTx = 1),
# age = age_all_notification,
age = NA,
start_delay = 0
)
QALY_all_tb
make_discount()
make_discount
discount
make_discount
discount(1)
discount(discount_rate = 1)
discount(discount_rate = 0)
remove.packages("QALY", lib="~/R/win-library/3.4")
install.packages("C:/Users/ngreen1/Dropbox/R/R code/QALY_0.1.0.tar.gz", repos = NULL, type = "source")
library("QALY", lib.loc="~/R/win-library/3.4")
devtools::load_all(".")
Kind1998_agegroups_QoL
test <- function(sens = list(pmin = 0.81,
pmax = 0.87),
spec = list(pmin = 0.81,
pmax = 0.87)) {
res <-
list(
sens = sens,
spec = spec)
res <- ("test", class(res))
return(res)
}
test <- function(sens = list(pmin = 0.81,
pmax = 0.87),
spec = list(pmin = 0.81,
pmax = 0.87)) {
res <-
list(
sens = sens,
spec = spec)
res <- ("test", class(res))
return(res)
}
test <- function(sens = list(pmin = 0.81,
pmax = 0.87),
spec = list(pmin = 0.81,
pmax = 0.87)) {
res <-
list(sens = sens,
spec = spec)
res <- ("test", class(res))
return(res)
}
test <- function(sens = list(pmin = 0.81,
pmax = 0.87),
spec = list(pmin = 0.81,
pmax = 0.87)) {
res <-
list(sens = sens,
spec = spec)
res <- c("test", class(res))
return(res)
}
QFT_GIT <- test(
list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
))
QFT_GIT
test <- function(sens = list(pmin = 0.81,
pmax = 0.87),
spec = list(pmin = 0.81,
pmax = 0.87)) {
res <-
list(sens = sens,
spec = spec)
res <- class("test", class(res))
return(res)
}
QFT_GIT <- test(
list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
))
test <- function(sens = list(pmin = 0.81,
pmax = 0.87),
spec = list(pmin = 0.81,
pmax = 0.87)) {
res <-
list(sens = sens,
spec = spec)
class(res) <- c("test", class(res))
return(res)
}
QFT_GIT <- test(
list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
))
QFT_GIT
list(
QFT_GIT =
test(list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
)),
QFT_plus =
test(list(
sens = list(pmin = 0.88, pmax = 0.88),
spec = list(pmin = 0.9717, pmax = 0.9717)
)),
TSPOT =
test(list(
sens = list(pmin = 0.85, pmax = 0.93),
spec = list(pmin = 0.86, pmax = 1.0)
))
)
test(list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
))
test <- function(sens,
spec) {
res <-
list(sens = sens,
spec = spec)
class(res) <- c("test", class(res))
return(res)
}
test(list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
))
test <- function(performance) {
res <-
list(sens = performance$sens,
spec = performance$spec)
class(res) <- c("test", class(res))
return(res)
}
test(list(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
))
test <- function(sens, spec) {
res <-
list(sens = sens,
spec = spec)
class(res) <- c("test", class(res))
return(res)
}
list(
QFT_GIT =
test(sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
),
QFT_plus =
test(sens = list(pmin = 0.88, pmax = 0.88),
spec = list(pmin = 0.9717, pmax = 0.9717)
),
TSPOT =
test(sens = list(pmin = 0.85, pmax = 0.93),
spec = list(pmin = 0.86, pmax = 1.0)
))
test_performance <-
list(
QFT_GIT =
test(
sens = list(pmin = 0.81, pmax = 0.87),
spec = list(pmin = 0.98, pmax = 1.0)
),
QFT_plus =
test(
sens = list(pmin = 0.88, pmax = 0.88),
spec = list(pmin = 0.9717, pmax = 0.9717)
),
TSPOT =
test(
sens = list(pmin = 0.85, pmax = 0.93),
spec = list(pmin = 0.86, pmax = 1.0)
))
test_performance
test_performance$QFT_GIT
