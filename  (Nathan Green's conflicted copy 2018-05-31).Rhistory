filterFun = function(x) x$name == "Effective")
osNode.cost$Set(pmax = eff$pmax,
filterFun = function(x) x$name == "Effective")
osNode.health$Set(pmin = eff$pmin,
filterFun = function(x) x$name == "Effective")
osNode.health$Set(pmax = eff$pmax,
filterFun = function(x) x$name == "Effective")
performance <-  test_performance[[interv$LTBI_test]]
osNode.cost$Set(pmin = performance$sens$pmin,
filterFun = function(x) x$name == "Sensitivity")
osNode.cost$Set(pmax = performance$sens$pmax,
filterFun = function(x) x$name == "Sensitivity")
osNode.cost$Set(pmin = performance$spec$pmin,
filterFun = function(x) x$name == "Specificity")
osNode.cost$Set(pmax = performance$spec$pmax,
filterFun = function(x) x$name == "Specificity")
osNode.health$Set(pmin = performance$sens$pmin,
filterFun = function(x) x$name == "Sensitivity")
osNode.health$Set(pmax = performance$sens$pmax,
filterFun = function(x) x$name == "Sensitivity")
osNode.health$Set(pmin = performance$spec$pmin,
filterFun = function(x) x$name == "Specificity")
osNode.health$Set(pmax = performance$spec$pmax,
filterFun = function(x) x$name == "Specificity")
ltbi_positive <- unit_cost$GP_incentive$ltbi_positive
osNode.cost$Set(min = ltbi_positive$params['mean'],
filterFun = function(x) x$name == "Sensitivity")
osNode.cost$Set(max = ltbi_positive$params['mean'],
filterFun = function(x) x$name == "Sensitivity")
osNode.cost$Set(min = ltbi_positive$params['mean'],
filterFun = function(x) x$name == "1-Specificity")
osNode.cost$Set(max = ltbi_positive$params['mean'],
filterFun = function(x) x$name == "1-Specificity")
data_folder <- system.file("data", package = "LTBIscreeningproject")
save(osNode.cost, file = paste0(data_folder, "/osNode_cost_2009.RData"))
save(osNode.health, file = paste0(data_folder, "/osNode_health_2009.RData"))
saveRDS(osNode.cost, file = paste0("Q:/R/cluster--LTBI-decision-tree", "/osNode_cost_2009.Rds"))
saveRDS(osNode.health, file = paste0("Q:/R/cluster--LTBI-decision-tree", "/osNode_health_2009.Rds"))
n.uk_tb <- unlist(n.uk_tb)
n.exit_tb <- unlist(n.exit_tb)
scenario_parameters[1:2]
scenario_parameters[1]
N.mc = 2
params <- scenario_parameters[1]
osNode.cost
assign_branch_values(osNode.cost,
osNode.health,
parameter_p = subset(params, val_type == "QALYloss"),
parameter_cost = subset(params, val_type == "cost"))
params
subset(params, val_type == "QALYloss")
subset(params, val_type == "cost")
params
params <- scenario_parameters[[1]]
params
assign_branch_values(osNode.cost,
osNode.health,
parameter_p = subset(params, val_type == "QALYloss"),
parameter_cost = subset(params, val_type == "cost"))
remove.packages("treeSimR", lib="~/R/win-library/3.4")
install.packages("C:/Users/ngreen1/Google Drive/R code/treeSimR/treeSimR_0.1.0.zip", repos = NULL, type = "win.binary")
library(treeSimR)
assign_branch_vals
assign_branch_values
rm(list = ls())
devtools::load_all(".")
library(parallel)
library(assertthat)
library(miscUtilities)
library(crayon)
library(tibble)
library(memoise)
library(QALY)
save_session_info("session_info.txt")
data("policies_ls")
# policies <- 1
# policies <- c(1,3,5)
policies <- seq_along(policies_ls)
home_dir <- find.package("LTBIscreeningproject")
sources_correctly <- NULL
runtime <- proc.time()
policy <<- NA
policy <<- pp
policy <<- 1
data("intervention_constants")
data("cost_effectiveness_params")
data("scenario_parameters")
data("model_input_cohort")
data("policies"); data("policies_ls")
# no LTBI - exit
cohort <-
data.frame(
age_at_entry                  = 18              ,
who_inc_Pareek2011            = "(150,250]"     ,
issdt                         = "2009-01-01"    ,
uk_tb                         = 0               ,
all_tb                        = 0               ,
LTBI                          = 0               ,
LTBI_or_activeTB              = FALSE           ,
screen_year                   = 1               ,
date_death1                   = "2040-01-01"    ,
date_death1_issdt             = 31              ,
date_exit_uk1                 = "2011-01-01"    ,
date_exit_uk1_issdt           = 2               ,
rNotificationDate_issdt.years = NA              ,
all_tb_issdt                  = NA              ,
cfr                           = 0               ,
tb_fatality                   = NA              ,
QALY_statusquo                = 1               ,
QALY_diseasefree              = 1               ,
QALY_cured                    = 1               ,
QALY_fatality                 = 0               ,
uk_notif_discounts            = 1               ,
all_notif_discounts           = 1               ,
uk_secondary_inf_discounts    = 1               ,
all_secondary_inf_discounts   = 1               ,
id_avoided_tb                 = NA
)
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/01aa-data-prep_constants-GLOBAL.R', echo=TRUE)
source("scripts/setup_folders.R")#, echo = TRUE)
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/01cc-data-prep_modelling-GLOBAL.R', echo=TRUE)
cohort
source("scripts/prep-decisiontree.R")#, echo = TRUE)
if (getwd() != "Q:/R/cluster--LTBI-decision-tree") {
exit_wd <- getwd()}
## MAKE SURE THIS IS UPTO DATE WITH PACKAGE
setwd("Q:/R/cluster--LTBI-decision-tree")
dectree_res <- lapply(scenario_parameters[1],
decision_tree_cluster,
N.mc = 2)
scenario_parameters
params <- scenario_parameters[[1]]
N.mc = 2
mcall <- match.call()
osNode.cost <- readRDS(file = cost_dectree)
cost_dectree = "osNode_cost_2009.Rds"
health_dectree = "osNode_health_2009.Rds"
osNode.cost <- readRDS(file = cost_dectree)
osNode.health <- readRDS(file = health_dectree)
assign_branch_values(osNode.cost,
osNode.health,
parameter_p = subset(params, val_type == "QALYloss"),
parameter_cost = subset(params, val_type == "cost"))
osNode.cost
params
remove.packages("treeSimR", lib="~/R/win-library/3.4")
install.packages("C:/Users/ngreen1/Google Drive/R code/treeSimR/treeSimR_0.1.0.zip", repos = NULL, type = "win.binary")
***************************
rm(list = ls())
devtools::load_all(".")
library(parallel)
library(assertthat)
library(miscUtilities)
library(crayon)
library(tibble)
library(memoise)
library(QALY)
save_session_info("session_info.txt")
##########
# inputs #
##########
# source("scripts/create_LTBI_input_workspace.R")
#########
data("policies_ls")
# policies <- 1
# policies <- c(1,3,5)
policies <- seq_along(policies_ls)
home_dir <- find.package("LTBIscreeningproject")
sources_correctly <- NULL
runtime <- proc.time()
policy <<- NA
policy <<- pp
policy <<- 1
data("intervention_constants")
data("cost_effectiveness_params")
data("scenario_parameters")
data("model_input_cohort")
data("policies"); data("policies_ls")
source("scripts/01aa-data-prep_constants-GLOBAL.R")#, echo = TRUE)
source("scripts/setup_folders.R")#, echo = TRUE)
# no LTBI - exit
cohort <-
data.frame(
age_at_entry                  = 18              ,
who_inc_Pareek2011            = "(150,250]"     ,
issdt                         = "2009-01-01"    ,
uk_tb                         = 0               ,
all_tb                        = 0               ,
LTBI                          = 0               ,
LTBI_or_activeTB              = FALSE           ,
screen_year                   = 1               ,
date_death1                   = "2040-01-01"    ,
date_death1_issdt             = 31              ,
date_exit_uk1                 = "2011-01-01"    ,
date_exit_uk1_issdt           = 2               ,
rNotificationDate_issdt.years = NA              ,
all_tb_issdt                  = NA              ,
cfr                           = 0               ,
tb_fatality                   = NA              ,
QALY_statusquo                = 1               ,
QALY_diseasefree              = 1               ,
QALY_cured                    = 1               ,
QALY_fatality                 = 0               ,
uk_notif_discounts            = 1               ,
all_notif_discounts           = 1               ,
uk_secondary_inf_discounts    = 1               ,
all_secondary_inf_discounts   = 1               ,
id_avoided_tb                 = NA
)
source("scripts/prep-decisiontree.R")#, echo = TRUE)
if (getwd() != "Q:/R/cluster--LTBI-decision-tree") {
exit_wd <- getwd()}
## MAKE SURE THIS IS UPTO DATE WITH PACKAGE
setwd("Q:/R/cluster--LTBI-decision-tree")
params <- scenario_parameters[[1]]
N.mc = 2
cost_dectree = "osNode_cost_2009.Rds"
health_dectree = "osNode_health_2009.Rds"
osNode.cost <- readRDS(file = cost_dectree)
osNode.health <- readRDS(file = health_dectree)
assign_branch_values(osNode.cost,
osNode.health,
parameter_p = subset(params, val_type == "QALYloss"),
parameter_cost = subset(params, val_type == "cost"))
library(treeSimR)
assign_branch_values(osNode.cost,
osNode.health,
parameter_p = subset(params, val_type == "QALYloss"),
parameter_cost = subset(params, val_type == "cost"))
osNode.cost
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/02-parallel-decision-tree.R', echo=TRUE)
dectree_res <- lapply(scenario_parameters[1],
decision_tree_cluster,
N.mc = 2)
dectree_res
setwd("C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject")
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/01-data-prep_scenario.R', echo=TRUE)
scenario_parameters
source("scripts/01aa-data-prep_constants-GLOBAL.R")#, echo = TRUE)
source("scripts/setup_folders.R")#, echo = TRUE)
source("scripts/01cc-data-prep_modelling-GLOBAL.R")#, echo = TRUE)
source("scripts/prep-decisiontree.R")#, echo = TRUE)
if (getwd() != "Q:/R/cluster--LTBI-decision-tree") {
exit_wd <- getwd()}
## MAKE SURE THIS IS UPTO DATE WITH PACKAGE
setwd("Q:/R/cluster--LTBI-decision-tree")
dectree_res <- lapply(scenario_parameters[1],
decision_tree_cluster,
N.mc = 2)
dectree_res
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/01-data-prep_scenario.R', echo=TRUE)
scenario_parameters
dectree_res <- lapply(scenario_parameters[1],
decision_tree_cluster,
N.mc = 2)
dectree_res
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/01-data-prep_scenario.R', echo=TRUE)
setwd("C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject")
source('C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject/scripts/01-data-prep_scenario.R', echo=TRUE)
scenario_parameters
if (getwd() != "Q:/R/cluster--LTBI-decision-tree") {
exit_wd <- getwd()}
## MAKE SURE THIS IS UPTO DATE WITH PACKAGE
setwd("Q:/R/cluster--LTBI-decision-tree")
dectree_res <- lapply(scenario_parameters[1],
decision_tree_cluster,
N.mc = 2)
dectree_res
source("scripts/04c-cost-effectiveness_QALY-costs.R")#, echo = TRUE)
setwd(exit_wd)
source("scripts/04c-cost-effectiveness_QALY-costs.R")#, echo = TRUE)
source("scripts/04-combine_dectree_and_cmprk_model_output.R")#, echo = TRUE)
c.total
tb_cost
tb_QALYgain
screen_discount
cohort
cohort <-
data.frame(
age_at_entry                  = "18"            ,
who_inc_Pareek2011            = "(150,250]"     ,
issdt                         = "2009-01-01"    ,
uk_tb                         = "1"             ,
all_tb                        = "1"             ,
LTBI                          = "1"             ,
LTBI_or_activeTB              = "TRUE"          ,
screen_year                   = 1               ,
date_death1                   = "2040-01-01"    ,
date_death1_issdt             = 31              ,
date_exit_uk1                 = "2050-01-01"    ,
date_exit_uk1_issdt           = 41              ,
rNotificationDate_issdt.years = 2               ,
all_tb_issdt                  = 2               ,
cfr                           = 0               ,
tb_fatality                   = NA              ,
QALY_statusquo                = 1               ,
QALY_diseasefree              = 1               ,
QALY_cured                    = 1               ,
QALY_fatality                 = 0               ,
uk_notif_discounts            = 1               ,
all_notif_discounts           = 1               ,
uk_secondary_inf_discounts    = 1               ,
all_secondary_inf_discounts   = 1               ,
id_avoided_tb                 = 1
)
screen_discount <- screen_discount(cohort)
# year cohort size potentially screened
pop_year <- nrow(cohort)
n.exit_tb <- sum(cohort$exituk_tb)
n.uk_tb <- sum(cohort$uk_tb)
n.all_tb <- n.uk_tb + n.exit_tb
screen_discount
# year cohort size potentially screened
pop_year <- nrow(cohort)
n.exit_tb <- sum(cohort$exituk_tb)
n.uk_tb <- sum(cohort$uk_tb)
n.exit_tb
cohort
# tb uk
cohort <-
data.frame(
age_at_entry                  = "18"            ,
who_inc_Pareek2011            = "(150,250]"     ,
issdt                         = "2009-01-01"    ,
uk_tb                         = "1"             ,
exituk_tb                     = "1"             ,
LTBI                          = "1"             ,
LTBI_or_activeTB              = "TRUE"          ,
screen_year                   = 1               ,
date_death1                   = "2040-01-01"    ,
date_death1_issdt             = 31              ,
date_exit_uk1                 = "2050-01-01"    ,
date_exit_uk1_issdt           = 41              ,
rNotificationDate_issdt.years = 2               ,
all_tb_issdt                  = 2               ,
cfr                           = 0               ,
tb_fatality                   = NA              ,
QALY_statusquo                = 1               ,
QALY_diseasefree              = 1               ,
QALY_cured                    = 1               ,
QALY_fatality                 = 0               ,
uk_notif_discounts            = 1               ,
all_notif_discounts           = 1               ,
uk_secondary_inf_discounts    = 1               ,
all_secondary_inf_discounts   = 1               ,
id_avoided_tb                 = 1
)
screen_discount <- screen_discount(cohort)
# year cohort size potentially screened
pop_year <- nrow(cohort)
n.exit_tb <- sum(cohort$exituk_tb)
# tb uk
cohort <-
data.frame(
age_at_entry                  = "18"            ,
who_inc_Pareek2011            = "(150,250]"     ,
issdt                         = "2009-01-01"    ,
uk_tb                         = 1               ,
exituk_tb                     = 0               ,
LTBI                          = "1"             ,
LTBI_or_activeTB              = "TRUE"          ,
screen_year                   = 1               ,
date_death1                   = "2040-01-01"    ,
date_death1_issdt             = 31              ,
date_exit_uk1                 = "2050-01-01"    ,
date_exit_uk1_issdt           = 41              ,
rNotificationDate_issdt.years = 2               ,
all_tb_issdt                  = 2               ,
cfr                           = 0               ,
tb_fatality                   = NA              ,
QALY_statusquo                = 1               ,
QALY_diseasefree              = 1               ,
QALY_cured                    = 1               ,
QALY_fatality                 = 0               ,
uk_notif_discounts            = 1               ,
all_notif_discounts           = 1               ,
uk_secondary_inf_discounts    = 1               ,
all_secondary_inf_discounts   = 1               ,
id_avoided_tb                 = 1
)
n.exit_tb <- sum(cohort$exituk_tb)
n.uk_tb <- sum(cohort$uk_tb)
n.all_tb <- n.uk_tb + n.exit_tb
n.all_tb
n.uk_tb
n.exit_tb
if (getwd() != "Q:/R/cluster--LTBI-decision-tree") {
exit_wd <- getwd()}
## MAKE SURE THIS IS UPTO DATE WITH PACKAGE
setwd("Q:/R/cluster--LTBI-decision-tree")
scenario_parameters
setwd("C:/Users/ngreen1/Dropbox/TB/LTBI/R/LTBIscreeningproject")
# convert from scenario-wise to remain-exit format
scenario_res <-
dectree_res %>%
purrr::transpose()
n.scenarios <- length(dectree_res)
n_uk_tb <- unlist(unname(sum(cohort$uk_tb)))
n_exit_tb <- unlist(unname(sum(cohort$exituk_tb)))
n_all_tb <- n_exit_tb + n_uk_tb
n_uk_tb
n_exit_tb
avoid_tb <- create_avoid_tb_list(scenario_res,
n_all_tb, n_uk_tb)
avoid_tb
interv_cost <- vector(length = interv$N.mc, mode = "list")
interv_QALY <- vector(length = interv$N.mc, mode = "list")
stats_scenario <- vector(length = n.scenarios, mode = "list")
mean_cost.aTB_TxDx <-
unit_cost$aTB_TxDx %>%
means_distributions() %>%
sum()
mean_num_sec_inf <-
NUM_SECONDARY_INF %>%
means_distributions() %>%
unlist()
costeff_cohort <-
cohort %>%
dplyr::filter(as.logical(all_tb)) %>%
select(cfr,
uk_tb,
all_tb,
QALY_statusquo,
QALY_diseasefree,
QALY_cured,
QALY_fatality,
uk_notif_discounts,
all_notif_discounts,
uk_secondary_inf_discounts,
all_secondary_inf_discounts,
id_avoided_tb) %>%
mutate(E_cost_sec_inf = mean_num_sec_inf * mean_cost.aTB_TxDx * all_secondary_inf_discounts,
E_cost_statusquo = (all_notif_discounts * mean_cost.aTB_TxDx) + E_cost_sec_inf,
E_QALY_statusquo = (cfr * QALY_fatality) + ((1 - cfr) * QALY_cured))
# tb uk
cohort <-
data.frame(
age_at_entry                  = "18"            ,
who_inc_Pareek2011            = "(150,250]"     ,
issdt                         = "2009-01-01"    ,
uk_tb                         = 1               ,
exituk_tb                     = 0               ,
all_tb                        = 1               ,
LTBI                          = "1"             ,
LTBI_or_activeTB              = "TRUE"          ,
screen_year                   = 1               ,
date_death1                   = "2040-01-01"    ,
date_death1_issdt             = 31              ,
date_exit_uk1                 = "2050-01-01"    ,
date_exit_uk1_issdt           = 41              ,
rNotificationDate_issdt.years = 2               ,
all_tb_issdt                  = 2               ,
cfr                           = 0               ,
tb_fatality                   = NA              ,
QALY_statusquo                = 1               ,
QALY_diseasefree              = 1               ,
QALY_cured                    = 1               ,
QALY_fatality                 = 0               ,
uk_notif_discounts            = 1               ,
all_notif_discounts           = 1               ,
uk_secondary_inf_discounts    = 1               ,
all_secondary_inf_discounts   = 1               ,
id_avoided_tb                 = 1
)
costeff_cohort <-
cohort %>%
dplyr::filter(as.logical(all_tb)) %>%
select(cfr,
uk_tb,
all_tb,
QALY_statusquo,
QALY_diseasefree,
QALY_cured,
QALY_fatality,
uk_notif_discounts,
all_notif_discounts,
uk_secondary_inf_discounts,
all_secondary_inf_discounts,
id_avoided_tb) %>%
mutate(E_cost_sec_inf = mean_num_sec_inf * mean_cost.aTB_TxDx * all_secondary_inf_discounts,
E_cost_statusquo = (all_notif_discounts * mean_cost.aTB_TxDx) + E_cost_sec_inf,
E_QALY_statusquo = (cfr * QALY_fatality) + ((1 - cfr) * QALY_cured))
costeff_cohort
mean_num_sec_inf
mean_cost.aTB_TxDx
all_secondary_inf_discounts
interv_scenario_cost <- partial(scenario_cost,
endpoint = interv$ENDPOINT_cost,
unit_cost.aTB_TxDx = unit_cost$aTB_TxDx,
num_2nd_inf = NUM_SECONDARY_INF,
costeff_cohort = costeff_cohort)
interv_scenario_QALY <- partial(scenario_QALY,
endpoint = interv$ENDPOINT_QALY,
costeff_cohort = costeff_cohort)
for (s in seq_len(n.scenarios)) {
message(sprintf("[ population model ] scenario: %s", green(s)))
for (i in seq_len(interv$N.mc)) {
# set.seed(12345)
num_avoided <- avoid_tb[[s]][i, ]
interv_cost[[i]] <- interv_scenario_cost(num_avoided)
interv_QALY[[i]] <- interv_scenario_QALY(num_avoided)
}
stats_scenario[[s]] <- costeff_stats(scenario_dat = dectree_res[[s]],
interv_QALY = interv_QALY,
interv_cost = interv_cost,
pop_year = nrow(cohort))
}
aTB_CE_stats <-
stats_scenario %>%
purrr::transpose()
stats_scenario
aTB_CE_stats
